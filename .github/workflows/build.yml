name: SonarQube
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build-and-analyze:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu' # Alternative distribution options are available
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonar --info

  build-docker-images:
    name: Build and push Docker images
    runs-on: ubuntu-latest
    needs: [ build-and-analyze ]
    permissions:
      packages: write
    steps:
      - name: Checkout from build
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.build-and-analyze.outputs.ref }}
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: graalvm
          cache: gradle
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          platforms: linux/amd64,linux/arm64
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # --- DOCKERX DEBUGGING STEP ---
      - name: Debug Docker Buildx Build Command Manually
        run: |
          echo "Attempting manual 'docker buildx build' for debugging..."
          
          DOCKERFILE_PATH="src/main/docker/Dockerfile.jvm"
          IMAGE_FULL_NAME="ghcr.io/${{ github.repository }}:${{ github.sha }}"
          PLATFORMS="linux/amd64,linux/arm64"
          BUILD_CONTEXT="." # Projekt-Root ist der Build-Kontext
          
          if [ ! -f "${DOCKERFILE_PATH}" ]; then
            echo "Error: Dockerfile not found at ${DOCKERFILE_PATH}"
            exit 1
          fi
          
          echo "Executing command:"
          echo "docker buildx build -f ${DOCKERFILE_PATH} -t ${IMAGE_FULL_NAME} --platform ${PLATFORMS} --push ${BUILD_CONTEXT}"
          echo "--- START OF MANUAL DOCKER BUILDX OUTPUT ---"
          
          set -euo pipefail
          set -x 
          
          docker buildx build \
            -f "${DOCKERFILE_PATH}" \
            -t "${IMAGE_FULL_NAME}" \
            --platform "${PLATFORMS}" \
            --push \
            "${BUILD_CONTEXT}"
          
          set +x # set -x deaktivieren
          echo "--- END OF MANUAL DOCKER BUILDX OUTPUT ---"
      - name: Build and push multi-arch image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          QUARKUS_CONTAINER_IMAGE_BUILD: true
          QUARKUS_CONTAINER_IMAGE_PUSH: true
          QUARKUS_CONTAINER_IMAGE_REGISTRY: ghcr.io
          QUARKUS_DOCKER_BUILDX_PLATFORM: "linux/amd64,linux/arm64"
          QUARKUS_CONTAINER_IMAGE_IMAGE: "ghcr.io/${{ github.repository }}:${{ github.sha }}"
          JAVA_TOOL_OPTIONS: "-Djava.util.logging.manager=org.jboss.logmanager.LogManager -Dorg.jboss.logging.level=DEBUG"
        run: |
          ./gradlew build --info